#!/usr/bin/python

import sys
import os

from libraptz.host import host
from libraptz.config import config
from libraptz.configure import Configure
from libraptz.cdebootstrap import CDebootstrap
from libraptz.debootstrap import Debootstrap
from libraptz.multistrap import Multistrap
from libraptz.apt import Apt
from libraptz.raptzerror import RaptzException
import libraptz.comp as comp
#from libraptz.mount import Mount

# Should be moved to ui?
class Script:
	_script = []
	def add(self, cmd, *kargs):
		self._script.append((cmd, kargs))

	def run(self):
		host.set_parts(len(self._script))
		for cmd, kargs in self._script:
			host.start(cmd.__name__)
			cmd(*kargs)
			host.done()
		return True

class Raptz:
	"""
Raptz sysroot handler

  raptz command [options]
	"""
	debug=True
	def chroot(self):
		""" Chroot into a sysroot """
		config.setup()
		if config.arg_pass:
			cmds = config.arg_pass
		else:
			cmds=["bash"]
		config.args.ui = "log"
		host.setup()
		host.fs.mount_system()
		ret = host.runner.chroot(cmds)
		host.fs.umount_system()
		return ret

	def tar(self):
		""" Create one or multiple compressed tar files """
		return self._comp(comp.Tar)

	def cpio(self):
		""" Create one or multiple compressed cpio files """
		return self._comp(comp.Cpio)

	def _comp(self, basetype):
		argp = config.get_argparser()
		argp.add_argument("-r", "--raw", default=None,
			help="Create a uncompressed raw file")
		argp.add_argument("-g", "--gzip", default=None,
			help="Create a gzip compressed file")
		argp.add_argument("-b", "--bzip2", default=None,
			help="Create a bzip2 compressed file")
		argp.add_argument("-x", "--xz", default=None,
			help="Create a xz compressed file")
		config.setup()
		sys = basetype(config.sysroot())
		if config.args.raw and config.args.raw != "":
			sys.add(comp.Cat(config.args.raw))
		if config.args.gzip and config.args.gzip != "":
			sys.add(comp.GZip(config.args.gzip))
		if config.args.bzip2 and config.args.bzip2 != "":
			sys.add(comp.BZip2(config.args.bzip2))
		if config.args.xz and config.args.xz != "":
			sys.add(comp.XZ(config.args.xz))
		sys.compress()
		return 0


	def mksys(self):
		""" Create a sysroot """
		argp = config.get_argparser()
		argp.add_argument("-c", "--clean", help="Clean the sysroot before building",
			 default=False, action='store_true')
		argp.add_argument("-D", "--dev", help="Run development parts of configuration",
			 default=False, action='store_true')
		argp.add_argument("-S", "--suite", help="Set different suite to install",
			default=None)
		argp.add_argument("-b", "--bootstrap", default="multistrap",
			help="bootstrap mode (multstrap*, debootstrap, cdebootstrap)"
		)
		config.setup()
		host.setup()
		sc = Script()
		if config.args.bootstrap == "multistrap":
			bsp = Multistrap()
		elif config.args.bootstrap == "debootstrap":
			bsp = Debootstrap()
		elif config.args.bootstrap == "cdebootstrap":
			bsp = CDebootstrap()
		else:
			raise "Unknown mode " + config.args.bootstrap
		apt = Apt()
		cfg = Configure()
		if config.args.clean:
			sc.add(cfg.clean)
		sc.add(bsp.bootstrap)
		sc.add(cfg.debconf)
		sc.add(bsp.secondstage)
		sc.add(cfg.copyroot)
		sc.add(bsp.finalize)
		sc.add(host.fs.mount_system)
		sc.add(apt.update)
		sc.add(apt.install, config.keyrings())
		sc.add(apt.update)
		sc.add(apt.install, config.packages())
		sc.add(cfg.configure)
		sc.add(host.fs.umount_system)
		sc.run()
		return 0

	def help(self):
		""" Print this help"""
		print self.__doc__
		print "Commands:"
		for m in dir(self):
			if m.startswith("_"):
				continue
			print "  %-10s - %s" %(m, getattr(self, m).__doc__)
		print ""

ret = 0
raptz = Raptz()
func = getattr(raptz, config.arg_command)
try:
	ret = func()
except RaptzException as e:
	if raptz.debug:
		raise
	else:
		print
		print "ERROR: " + str(e)
		print
	exit(1)

try:
	os.wait()
except OSError as e:
	if e.errno == 10: # No child process
		pass
	else:
		raise
exit(ret)
